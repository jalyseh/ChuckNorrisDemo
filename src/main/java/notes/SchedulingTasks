SCHEDULING TASKS

    - requires awaitility dependency

    @Scheduled: The Scheduled annotation defines when a particular method runs

    - fixedRate: specifies the interval between method invocations,
    measured from the start time of each invocation
    There are other options

    - fixedDelay: specifies the interval between invocations measured from the completion of the task.
    - Can also use @Scheduled(cron=". . .") expressions for more sophisticated task scheduling

    @SpringBootApplication is a convenience annotation that adds all of the following:

    @Configuration: Tags the class as a source of bean definitions for the application context

    @EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.
        - For example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors,
          such as setting up a DispatcherServlet

    @ComponentScan: Tells Spring to look for other components, configurations,
    and services in the com/example package, letting it find the controllers

    The main() method uses "Spring Bootâ€™s SpringApplication.run()" method to launch an application
    There is no web.xml file. The web application is 100% pure Java and will allow you not to deal with configuring any plumbing or infrastructure

    @EnableScheduling: annotation ensures that a background task executor is created. Without it, nothing gets scheduled