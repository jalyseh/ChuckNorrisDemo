BUILDING A RESTFUL WEB SOURCE

    - when building RESTful web services, HTTP requests are handled by a controller.

    - Components are identified by the:

        * @RestController annotation
        * the GreetingController shown in the following listing
        (from src/main/java/com/example/restservice/GreetingController.java) handles GET requests for /greeting by returning a new instance of the Greeting class

    @GetMapping annotation ensures that HTTP GET requests to /greeting are mapped to the greeting() method

        - There are companion annotations for other HTTP verbs (e.g. @PostMapping for POST)

    @RequestMapping annotation that they all derive from (e.g. @RequestMapping(method=GET))

    @RequestParam binds the value of the query string parameter name into the name parameter of the greeting() method
        * If the name parameter is absent in the request, the defaultValue of World is used

    - The implementation of the method body creates and returns a new Greeting object with id and content attributes based on the next value from the counter and formats the given name by using the greeting template

    - A key difference between a traditional MVC controller and the RESTful web service controller shown earlier is the way that the HTTP response body is created
        * Rather than relying on a view technology to perform server-side rendering of the greeting data to HTML, this RESTful web service controller populates and returns a Greeting object
        * The object data will be written directly to the HTTP response as JSON

    @RestController: marks the class as a controller where every method returns a domain object instead of a view.
        * It is shorthand for including both @Controller and @ResponseBody

    - You need not do this convert the Greeting object to JSON manually
      because Jackson 2 is on the classpath, Spring’s MappingJackson2HttpMessageConverter is automatically chosen to convert the Greeting instance to JSON

    @SpringBootApplication: a convenience annotation that adds all of the following:

    @Configuration: Tags the class as a source of bean definitions for the application context

    @EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.
        * For example, if spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as setting up a DispatcherServlet

     @ComponentScan: Tells Spring to look for other components, configurations, and services in the com/example package, letting it find the controllers

    - The main() method uses Spring Boot’s SpringApplication.run() method to launch an application